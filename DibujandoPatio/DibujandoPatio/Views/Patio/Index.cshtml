
@{
    ViewBag.Title = "Dibujando Patio";
}


<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Editor de patios</title>

    <script src="https://cdn.jsdelivr.net/npm/konva@9.0.0/konva.min.js"></script>
    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/bootbox.min.js"></script>
    <script src="~/Scripts/linq-1.2.3.js"></script>
    



    <style>
        body {
            font-family: Arial;
        }

        #container {
            width: 1200px;
            height: 800px;
            border: 1px solid black;
            margin-top: 10px;
        }
    </style>

</head>
<body>
    <h2>Dibujar Patios</h2>
    <input type="text" id="nombreInput" placeholder="Ingresa el nombre del patio" />
    <br />
    <br />
    <label for="escalaInput">Escala:</label>
    <input type="number" id="escalaInput" value="0.5" step="0.1" min="0.1" />
    <br />
    <br />
    <button id="crearPatioBtn">Iniciar Dibujo</button>
    <button id="guardarBtn" disabled>Guardar</button>
    <select id="selectPatio">
        <option value="">Selecciona un patio</option>
    </select>
    <button onclick="Lienzo.RestaurarTamano()">Tamaño Original</button>
    <button id="patioEditar" onclick="" disabled>Editar patio</button>
    <button id="patioEliminar" onclick="" disabled>Eliminar patio</button>

    <div id="container"></div>

    <script type="text/javascript">
        function throttle(func, limit) {
            var inThrottle=false;
            return function (...args) {
                if (!inThrottle) {
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                    func.apply(this, args);
                }
            }
        }

    </script>

    <script>

        var enumEstadoLienzo = {
            Agregando:'Agregando',
            Moviendo:'Moviendo',
            Editando:'Editando',
        };

        var enumBotton = {
            ClickIzquierdo: 0,
            ClickDerecho: 2
        }

        var Lienzo = {
            Estado: null,
            lstPunto: [],
            PuntoActual: null,
            DamePosicion: function () {
                const transform = this.Stage.getAbsoluteTransform().copy();
                transform.invert();
                const posicion = transform.point(this.Stage.getPointerPosition());
                return posicion;
            },
            RestaurarTamano: function () {
                this.Stage.scale({ x: 1, y: 1 });
                this.Stage.position({ x: 0, y: 0 });
                this.Stage.batchDraw();
            },
            EditarPatio: function () {

            },
            EliminarPatio: function () {

            },
            Cerrar: function () {
                if (this.PuntoActual != null)
                    this.PuntoActual.Eliminar();

                var puntoInicial = this.lstPunto[0];
                var puntoFinal = this.lstPunto[this.lstPunto.length - 1];

                this.RelacionarPuntos(puntoInicial, puntoFinal);

                puntoInicial.Dibujar();
                puntoFinal.Dibujar();

                this.Estado = enumEstadoLienzo.Editando;
                this.AjustarOrden();
            },
            RelacionarPuntos: function (punto1, punto2) {
                var linea = new Linea(punto1, punto2);
                punto1.lstRelacionado.push(linea);
                punto2.lstRelacionado.push(linea);

                linea.lstRelacionado.push(punto1);
                linea.lstRelacionado.push(punto2);
            },
            AgregarPunto: function (x, y) {
                var punto = new Punto();
                punto.Posicion.x = x;
                punto.Posicion.y = y;

                this.lstPunto.push(punto);

                if (this.PuntoActual != null) {
                    this.RelacionarPuntos(this.PuntoActual, punto);
                }
                punto.Dibujar();

                this.AjustarOrden();

                return punto;
            },
            AjustarOrden: function () {
                this.lstPunto.toReversed().forEach(item => {
                    item.MoverArriba();
                });
            },
            HabilitarArrastrable: function (habilitar) {
                if (habilitar) {
                    this.Stage.draggable(true);
                    this.Stage.startDrag();
                    this._contextualMenuHandler = (e) => e.preventDefault();
                    this.Stage.container().addEventListener('contextmenu', this._contextualMenuHandler);
                } else {
                    this.Stage.draggable(false);
                    //if (this._contextualMenuHandler) {
                        //this.Stage.container().removeEventListener('contextmenu', this._contextualMenuHandler);
                        //this._contextualMenuHandler = null;
                    //}
                }
            }
        };

        var enumTipoGrafico = {
            Linea: 'Linea',
            Punto: 'Punto'
        };

        function Linea(puntoInicial, puntoFinal) {
            this.Tipo = enumTipoGrafico.Linea;
            this.Grafico = null;
            this.GraficoTexto = null;
            this.lstRelacionado = [];

            this.PuntoInicial = puntoInicial
            this.PuntoFinal = puntoFinal;

            this.Eliminar = function () {
                this.Grafico?.destroy();
                this.GraficoTexto?.destroy();
                this.lstRelacionado.forEach(item => {
                    item.lstRelacionado.RemoveAll(c => c == this);
                });
            }

            this.Dibujar = function () {

                var cfgGraficoLinea = {
                    points: [this.PuntoInicial.Posicion.x, this.PuntoInicial.Posicion.y, this.PuntoFinal.Posicion.x, this.PuntoFinal.Posicion.y],
                    stroke: 'blue',
                    strokeWidth: 4
                };

                const dx = this.PuntoFinal.Posicion.x - this.PuntoInicial.Posicion.x;
                const dy = this.PuntoFinal.Posicion.y - this.PuntoInicial.Posicion.y;
                const distanciaPixeles = Math.sqrt(dx * dx + dy * dy);
                const distanciaMetros = distanciaPixeles * escala;

                var cfgGraficoTexto = {
                    x: (this.PuntoInicial.Posicion.x + this.PuntoFinal.Posicion.x) / 2,
                    y: (this.PuntoInicial.Posicion.y + this.PuntoFinal.Posicion.y) / 2,
                    text: `${distanciaMetros.toFixed(2)}m`,
                    fontSize: 16,
                    fill: 'black',
                    padding: 4,
                    background: 'white'
                };

                if (this.Grafico == null) {
                    this.Grafico = new Konva.Line(cfgGraficoLinea);
                    this.GraficoTexto = new Konva.Text(cfgGraficoTexto);

                    layer.add(this.Grafico);
                    layer.add(this.GraficoTexto);

                    //Preguntar por que en Brave si funciona, pero en Edge no
                    this.Grafico.on('dblclick', (e) => {
                        var thisNuevoPunto = this;
                        bootbox.confirm({
                            message: '¿Deseas agregar un nuevo punto?',
                            buttons: {
                                confirm: {
                                    label: 'Agregar',
                                    className: 'btn-success'
                                },
                                cancel: {
                                    label: 'Cancelar',
                                    className: 'btn-danger'
                                }
                            },
                            callback: (result) => {
                                if (result) {
                                    if (Lienzo.Estado === enumEstadoLienzo.Editando) {
                                        const pos = Lienzo.DamePosicion();
                                        thisNuevoPunto.Eliminar();
                                        var punto = Lienzo.AgregarPunto(pos.x, pos.y);
                                        var Orden = 0;
                                        thisNuevoPunto.lstRelacionado.forEach(item => {
                                            Lienzo.RelacionarPuntos(punto, item);
                                            if (item.Orden < Orden)
                                                Orden = item.Orden;
                                        });
                                        punto.Orden = Orden + 1;

                                        Lienzo.lstPunto.forEach(item => {
                                            if (item.Orden > Orden && item != punto)
                                                item.Orden++;
                                        });

                                        punto.Dibujar();
                                        Lienzo.AjustarOrden();
                                        Lienzo.PuntoActual = punto;
                                        Lienzo.Estado = enumEstadoLienzo.Moviendo;
                                    }
                                }
                            }
                        });
                    });
                } else {
                    this.Grafico.setAttrs(cfgGraficoLinea);
                    this.Grafico.getLayer().batchDraw();

                    this.GraficoTexto.setAttrs(cfgGraficoTexto);
                    this.GraficoTexto.getLayer().batchDraw();
                }
            }
        }

        function Punto() {
            this.Tipo = enumTipoGrafico.Punto;
            this.Grafico = null;
            this.lstRelacionado = [];
            this.Arrastrable = false;

            this.Posicion = { x: null, y: null };
            this.Orden = Punto.OrdenActual++;

            this.Eliminar = function () {
                this.Grafico.destroy();
                Lienzo.lstPunto.RemoveAll(c => c == this);
                if (Lienzo.PuntoActual == this)
                    Lienzo.PuntoActual = null;

                var temp = [];
                temp.AddRange(this.lstRelacionado);

                temp.forEach(function (item) {
                    item.Eliminar();
                });

                return this;
            }

            this.Dibujar = function () {

                var cfgGrafico = {
                    x: this.Posicion.x,
                    y: this.Posicion.y,
                    radius: 7,
                    fill: 'red',
                    draggable: false
                };

                if (this.Grafico == null)
                {
                    this.Grafico = new Konva.Circle(cfgGrafico);
                    layer.add(this.Grafico);

                    this.Grafico.on('mousedown', throttle((e) => {
                        if (Lienzo.Estado === enumEstadoLienzo.Editando) {
                            Lienzo.Estado = enumEstadoLienzo.Moviendo;
                            Lienzo.PuntoActual = this;
                        } else if (Lienzo.Estado === enumEstadoLienzo.Moviendo) {
                            Lienzo.Estado = enumEstadoLienzo.Editando;
                            Lienzo.PuntoActual = null;
                        } else if (Lienzo.Estado === enumEstadoLienzo.Agregando && Lienzo.lstPunto.length >= 3 && Lienzo.lstPunto[0] === this) {
                            Lienzo.Cerrar();
                        }
                    }, 300));
                    this.Grafico.on('dblclick', (e) => {
                        if (Lienzo.Estado === enumEstadoLienzo.Editando) {
                            
                            var lstpunto = [];
                            
                            this.lstRelacionado.forEach(linea => {
                                console.log(linea);
                                linea.lstRelacionado.forEach(punto => {
                                    if (punto != this)
                                        lstpunto.push(punto);
                                });
                            });

                            var punto1 = lstpunto[0];
                            var punto2 = lstpunto[1];

                            this.Eliminar();

                            Lienzo.RelacionarPuntos(punto1, punto2);

                            punto1.Dibujar();

                            Lienzo.lstPunto.forEach(item => {
                                if (item.Orden > this.Orden && item != this)
                                    item.Orden--;
                            });
                        }
                    });
                }
                else {
                    this.Grafico.setAttrs(cfgGrafico);
                    this.Grafico.getLayer().batchDraw();
                }

                this.lstRelacionado.forEach(function (item) {
                    item.Dibujar();
                });
            }

            this.MoverArriba = function () {
                this.Grafico.moveToTop();
            }
        }

        Punto.OrdenActual = 0;

        let layer;
        const escala = parseFloat($('#escalaInput').val());
        $(document).ready(function () {
            let stage = new Konva.Stage({
                container: 'container',
                width: 1200,
                height: 800
            });

            Lienzo.Stage = stage;

            //Instanciar las capas en el escenario
            layer = new Konva.Layer();
            stage.add(layer);

            //Variables booleanas
            let moviendo = false;
            let dibujando = false;
            var dibujandoLinea = false;

            //Boton que permite la creacion del patio
            $('#crearPatioBtn').on('click', function () {
                Lienzo.Estado = enumEstadoLienzo.Agregando;
                layer.destroyChildren();
                layer.draw();
                $('#guardarBtn').prop('disabled', false);
            });

            //Evento que permite el zoom al girar la rueda del raton
            stage.on('wheel', (e) => {
                e.evt.preventDefault();
                const escalaAnterior = stage.scaleX();
                const cursor = stage.getPointerPosition();

                const escalarPor = 1.01;
                const direccion = e.evt.deltaY > 0 ? 1 : -1;
                const nuevaEscala = direccion > 0 ? escalaAnterior / escalarPor : escalaAnterior * escalarPor;

                stage.scale({ x: nuevaEscala, y: nuevaEscala });

                const mousePointTo = {
                    x: (cursor.x - stage.x()) / escalaAnterior,
                    y: (cursor.y - stage.y()) / escalaAnterior
                };
                stage.position({
                    x: cursor.x - mousePointTo.x * nuevaEscala,
                    y: cursor.y - mousePointTo.y * nuevaEscala
                });
                stage.batchDraw();
            });

            //Evento que permite dibujar si se da clic
            stage.on('mousedown', function (e) {
                switch (e.evt.button) {
                    case enumBotton.ClickDerecho: {
                        Lienzo.HabilitarArrastrable(true);
                        break;
                    }
                    case enumBotton.ClickIzquierdo: {
                        if (Lienzo.Estado === enumEstadoLienzo.Agregando) {
                            const posicion = Lienzo.DamePosicion();

                            Lienzo.PuntoActual = Lienzo.AgregarPunto(posicion.x, posicion.y);
                            if (Lienzo.lstPunto.length == 0)
                                Lienzo.PuntoActual =Lienzo.AgregarPunto(posicion.x, posicion.y);
                        }                        
                        break;
                    }
                }
            });

            //Acciones que se realizan al arrastrar el mouse
            stage.on('mousemove', function (e) {
                
                if ([enumEstadoLienzo.Agregando, enumEstadoLienzo.Editando, enumEstadoLienzo.Moviendo].includes(Lienzo.Estado)) {
                    
                    if (Lienzo.PuntoActual != null) {
                        const pos = Lienzo.DamePosicion();

                        Lienzo.PuntoActual.Posicion.x = pos.x;
                        Lienzo.PuntoActual.Posicion.y = pos.y;
                        Lienzo.PuntoActual.Dibujar();
                    }
                }
            });

            //Acciones que se realizan al dejar de hacer un clic sostenido
            stage.on('mouseup', function (e) {
                if (e.evt.button === 2) {
                    Lienzo.HabilitarArrastrable(false);
                }
            });

            //Instrucciones al dar click en el boton guardar
            $('#guardarBtn').on('click', function (e) {
                Lienzo.Cerrar();

                //Se guarda el nombre del input con el id nombreInput
                const nombre = $('#nombreInput').val();

                //Arreglo de vertices que guarda el orden en el que fueron creados los puntos al recorrer
                //el array puntos con un for
                const vertices = Lienzo.lstPunto.map(p => ({
                    x: p.Posicion.x,
                    y: p.Posicion.y,
                    Orden: p.Orden
                }));
                //for (let i = 0; i < puntos.length; i += 2) {
                //    vertices.push({ x: Lienzo.[i].x, y: puntos[i].y, orden: vertices.length });
                //}

                ////Condicion que envia una alerta si alguno de los campos no se ha completado
                if (!nombre || !escala || vertices.length === 0) {
                    bootbox.alert("Por favor, completa todos los campos y/o dibuja el patio antes de guardar.");
                    return;
                }

                ////Metodo POST usando jquery y ajax para comunicar con la BD
                $.ajax({
                    url: '/Patio/GuardarPatio',
                    method: 'POST',
                    data: JSON.stringify({
                        nombre: nombre,
                        escala: escala,
                        vertices: vertices
                    }),
                    contentType: 'application/json',
                    success: function (res) {
                        bootbox.alert("Guardado correctamente");
                        dibujando = false;
                        $('#guardarBtn').prop('disabled', true);
                    }
                });
            });

            //Metodo get que obtiene desde un JSON los datos desde la BD
            $.getJSON('/Patio/ListarPatios', function (data) {
                data.forEach(p => {
                    $('#selectPatio').append(`<option value="${p.Id}">${p.Nombre}</option>`);
                });
            });

            //Lista desplegable que muestra los patios ya registrados en DB
            $(`#selectPatio`).on('change', function () {
                $(`#patioEditar`).prop('disabled', false);
                $(`#patioEliminar`).prop('disabled', false);

                const id = $(this).val();

                layer.destroyChildren();
                layer.draw();

                Lienzo.lstPunto = [];
                Lienzo.PuntoActual = null;

                if (!id) return;
                //Metodo que obtiene los vertices de la figura y el orden mediante un JSON
                $.getJSON('/Patio/ObtenerPatioId', { id: id }, function (p) {
                    if (!p || !p.Vertices) return;

                    let verticesOrdenados = p.Vertices.sort((a, b) => a.Orden - b.Orden);
                    let puntos = [];
                    verticesOrdenados.forEach(v => {
                        let punto = new Punto();
                        punto.Posicion.x = v.X;
                        punto.Posicion.y = v.Y;
                        puntos.push(punto);
                        Lienzo.lstPunto.push(punto);
                    });

                    for (let i = 0; i < puntos.length; i++) {
                        let siguiente = (i + 1) % puntos.length;
                        Lienzo.RelacionarPuntos(puntos[i], puntos[siguiente]);
                    }

                    Lienzo.lstPunto.forEach(punto => punto.Dibujar());
                    Lienzo.Estado = enumEstadoLienzo.Editando;

                        
                });
            });
        });

    </script>
</body>
</html>

